// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package model

import (
	"context"
)

const createUser = `-- name: CreateUser :execrows
INSERT INTO user (
  username, password
) VALUES (
  ?, ?
)
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.exec(ctx, q.createUserStmt, createUser, arg.Username, arg.Password)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getPasswordByUsername = `-- name: GetPasswordByUsername :one
SELECT password FROM user
WHERE username = ?
`

func (q *Queries) GetPasswordByUsername(ctx context.Context, username string) (string, error) {
	row := q.queryRow(ctx, q.getPasswordByUsernameStmt, getPasswordByUsername, username)
	var password string
	err := row.Scan(&password)
	return password, err
}

const listUser = `-- name: ListUser :many
SELECT id, username FROM user
ORDER BY name
`

type ListUserRow struct {
	ID       int64
	Username string
}

func (q *Queries) ListUser(ctx context.Context) ([]ListUserRow, error) {
	rows, err := q.query(ctx, q.listUserStmt, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUserRow{}
	for rows.Next() {
		var i ListUserRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
