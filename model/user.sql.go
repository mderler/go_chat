// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package model

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO user (
  username, full_name, password, color
) VALUES (
  ?, ?, ?, ?
) RETURNING id
`

type CreateUserParams struct {
	Username string
	FullName string
	Password string
	Color    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Username,
		arg.FullName,
		arg.Password,
		arg.Color,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUserForChatById = `-- name: GetUserForChatById :one
SELECT full_name, color FROM user
WHERE id = ?
`

type GetUserForChatByIdRow struct {
	FullName string
	Color    string
}

func (q *Queries) GetUserForChatById(ctx context.Context, id int64) (GetUserForChatByIdRow, error) {
	row := q.queryRow(ctx, q.getUserForChatByIdStmt, getUserForChatById, id)
	var i GetUserForChatByIdRow
	err := row.Scan(&i.FullName, &i.Color)
	return i, err
}

const getUserForLogin = `-- name: GetUserForLogin :one
SELECT id, password FROM user
WHERE username = ?
`

type GetUserForLoginRow struct {
	ID       int64
	Password string
}

func (q *Queries) GetUserForLogin(ctx context.Context, username string) (GetUserForLoginRow, error) {
	row := q.queryRow(ctx, q.getUserForLoginStmt, getUserForLogin, username)
	var i GetUserForLoginRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}

const getUsersByQuery = `-- name: GetUsersByQuery :many
SELECT id, username, full_name FROM user
WHERE username LIKE ?1 OR full_name LIKE ?1
`

type GetUsersByQueryRow struct {
	ID       int64
	Username string
	FullName string
}

func (q *Queries) GetUsersByQuery(ctx context.Context, name string) ([]GetUsersByQueryRow, error) {
	rows, err := q.query(ctx, q.getUsersByQueryStmt, getUsersByQuery, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersByQueryRow{}
	for rows.Next() {
		var i GetUsersByQueryRow
		if err := rows.Scan(&i.ID, &i.Username, &i.FullName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUser = `-- name: ListUser :many
SELECT id, username, full_name FROM user
ORDER BY name
`

type ListUserRow struct {
	ID       int64
	Username string
	FullName string
}

func (q *Queries) ListUser(ctx context.Context) ([]ListUserRow, error) {
	rows, err := q.query(ctx, q.listUserStmt, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUserRow{}
	for rows.Next() {
		var i ListUserRow
		if err := rows.Scan(&i.ID, &i.Username, &i.FullName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
