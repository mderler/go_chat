// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: message.sql

package model

import (
	"context"
)

const createDirectMessage = `-- name: CreateDirectMessage :exec
INSERT INTO direct_message (
  receiver_id, message_id
) VALUES (
  ?, ?
)
`

type CreateDirectMessageParams struct {
	ReceiverID int64
	MessageID  int64
}

func (q *Queries) CreateDirectMessage(ctx context.Context, arg CreateDirectMessageParams) error {
	_, err := q.exec(ctx, q.createDirectMessageStmt, createDirectMessage, arg.ReceiverID, arg.MessageID)
	return err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO message (
  sender_id, content
) VALUES (
  ?, ?
)
RETURNING id
`

type CreateMessageParams struct {
	SenderID int64
	Content  string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (int64, error) {
	row := q.queryRow(ctx, q.createMessageStmt, createMessage, arg.SenderID, arg.Content)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getDirectMessages = `-- name: GetDirectMessages :many
SELECT messages.sender_id, messages.content, messages.full_name, messages.color
FROM (
  SELECT message.id, message.sender_id, message.content, user.full_name, user.color FROM message
  JOIN user ON message.sender_id = user.id
  JOIN direct_message ON message.id = direct_message.message_id
  WHERE
    (direct_message.receiver_id = ?1 AND message.sender_id = ?2) OR 
    (direct_message.receiver_id = ?2 AND message.sender_id = ?1)
  ORDER BY message.id DESC
  LIMIT 25 OFFSET ?3
) AS messages
ORDER BY messages.id ASC
`

type GetDirectMessagesParams struct {
	UserID    int64
	ContactID int64
	Offset    int64
}

type GetDirectMessagesRow struct {
	SenderID int64
	Content  string
	FullName string
	Color    string
}

func (q *Queries) GetDirectMessages(ctx context.Context, arg GetDirectMessagesParams) ([]GetDirectMessagesRow, error) {
	rows, err := q.query(ctx, q.getDirectMessagesStmt, getDirectMessages, arg.UserID, arg.ContactID, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDirectMessagesRow{}
	for rows.Next() {
		var i GetDirectMessagesRow
		if err := rows.Scan(
			&i.SenderID,
			&i.Content,
			&i.FullName,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
