package index

import (
	"strings"
	"github.com/mderler/go_chat/view/layout"
	"github.com/mderler/go_chat/model"
)

func extractFirstCharacters(name string) string {
	words := strings.Split(name, " ")
	wordCount := len(words)
	if wordCount > 1 {
		return strings.ToUpper(words[0][:1] + words[wordCount-1][:1])
	}
	return strings.ToUpper(name[:2])
}

templ userIcon(name string, color string) {
	<span
		class={ "h-8 w-8 mr-2 border rounded-full text-xl text-center", bgColor(color) }
	>
		{ extractFirstCharacters(name) }
	</span>
}

templ Show(user model.GetUserForChatByIdRow, chatParams ChatParams, contactedUsers []model.GetContactedUsersRow) {
	@layout.Base() {
		<div
			class="bg-gray-100 flex h-screen text-white bg-gradient-to-b from-slate-600 to-[#240000]"
		>
			<div class="flex flex-col border-r pt-2">
				<div class="flex flex-row gap-2 items-center select-none">
					<div class="text-xl ml-2 flex items-center">
						<div class="ml-2 flex items-center">
							@userIcon(user.FullName, user.Color)
							<span class="select-text">{ user.FullName }</span>
						</div>
						<button hx-post="/logout">&#x1F6AA;</button>
					</div>
					<button id="new-chat-button" class="ml-auto mr-2">&#x270F;</button>
				</div>
				<section class="w-80 grow">
					<ul class="flex flex-col gap-2 mx-2 mt-2">
						@ShowContactedUsers(contactedUsers)
					</ul>
				</section>
			</div>
			<div id="chat-container" class="flex flex-col grow bg-slate-950/30 justify-center h-screen max-h-screen">
				if len(chatParams.Messages) > 0 {
					@ShowChat(chatParams)
				} else {
					<div class="flex flex-col text-pretty border-[16px] border-dashed border-gray-300 rounded-xl h-72 max-w-92 p-8 self-center">
						<div class="text-4xl text-gray-300 font-extrabold">Here will be your chats!</div>
						<div class="text-xl italic text-gray-400 text-center text-pretty w-64 m-auto">Click on the "New Chat" Icon at the top left to start a conversation.</div>
					</div>
				}
			</div>
		</div>
		<dialog id="new-chat-dialog" class="fixed text-white border border-black rounded-xl px-4 py-4 bg-slate-900 w-[48rem]">
			<form method="dialog">
				<div class="flex flex-row justify-between pb-2 mb-2">
					<div class="cursor-pointer">
						<span
							class="text-xl font-bold border-b-2 border-teal-400"
							hx-get="/new-chat"
							hx-target="#new-chat-or-group-content"
						>New Chat</span>
						<span
							class="text-xl font-bold border-b-2 border-slate-700"
							hx-get="/new-group"
							hx-target="#new-chat-or-group-content"
						>New Group</span>
					</div>
					<button type="cancel" class="text-4xl text-red-500 select-none">&times;</button>
				</div>
				<div id="new-chat-or-group-content">
					@ShowNewChat()
				</div>
			</form>
		</dialog>
		<script>
			var messageContainer

			const socket = new WebSocket(`ws://${window.location.host}/ws`)	
			socket.binaryType = 'arraybuffer'

			socket.onmessage = (event) => {
				const message = unpackMessage(event.data)

				if (!messageContainer) {
					return
				}

				messageContainer.innerHTML += message.text
				if (messageContainer.scrollHeight - messageContainer.scrollTop < 1000) {
					messageContainer.scrollTop = messageContainer.scrollHeight
				}
			}

			socket.onclose = (event) => {
				console.log('Socket closed', event)
			}

			socket.onerror = (event) => {
				console.error('Socket error', event)
			}

			function unpackMessage(data) {
				const isGroup = data[0] !== 0;

				const userOrGroupId = new DataView(data).getBigUint64(1, true);

				const textBytes = data.slice(9);
				const text = new TextDecoder().decode(textBytes);

				return { isGroup, userOrGroupId, text };
			}

			function sendMessage(isGroup, userOrGroupId, text) {
				const typeBit = isGroup ? 1 : 0;

				const textBytes = new TextEncoder().encode(text);

				const buffer = new ArrayBuffer(9 + textBytes.length);
				const view = new DataView(buffer);

				view.setUint8(0, typeBit);

				view.setBigUint64(1, BigInt(userOrGroupId), true);

				for (let i = 0; i < textBytes.length; i++) {
					view.setUint8(i + 9, textBytes[i]);
				}

				socket.send(buffer)
			}

			const dialog = document.getElementById('new-chat-dialog')

			document.getElementById('new-chat-button')
				.addEventListener('click', () => {
					dialog.showModal()
				})
			
			const userSearch = document.getElementById('user-search')

			function selectContact() {
				dialog.close()
				userSearch.value = ''
			}
		</script>
	}
}
